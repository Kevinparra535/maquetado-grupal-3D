{
  // Place your snippets for javascript, javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // "scope": "javascript, javascriptreact",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "react arrow function component": {
    "prefix": "_rface",
    "scope": "javascript, javascriptreact",
    "body": [
      "",
      "// Librerias",
      "import React, { useEffect, useState } from 'react';",
      "",
      "// Contextos",
      "",
      "// Hooks",
      "",
      "// Componentes",
      "",
      "// Imagenes",
      "",
      "// Estilos",
      "",
      "/**",
      " * Descripción: La descripción de por qué estamos haciendo este componente y que resuelve.",
      " *",
      " * Implementación: Descripción sobre cómo puedes implementar el componente.",
      " *",
      " * Bugs: Qué bugs se han presentado y como se solucionan.",
      " */",
      "",
      "",
      "const ${TM_FILENAME_BASE}$1 = () => {",
      "  // Estados",
      "  const [data, setData] = useState([]);",
      "",
      "  // Contextos",
      "",
      "  // Hooks",
      "",
      "  // Funciones",
      "",
      "  // UseEffects",
      "  useEffect(() => {}, []);",
      "",
      "  return <>$2</>;",
      "};",
      "",
      "export default ${TM_FILENAME_BASE}$1;"
    ],
    "description": "Estructura de un componente react con arrow function, con la estructura para trabajar con nuestro sistema de diseño"
  },

  "react arrow function api component": {
    "prefix": "_rfaceapi",
    "scope": "javascript, javascriptreact",
    "body": [
      "",
      "// Librerias",
      "import React, { useEffect, useState } from 'react';",
      "",
      "// Contextos",
      "",
      "// Hooks",
      "",
      "// Componentes",
      "",
      "// Imagenes",
      "",
      "// Estilos",
      "",
      "/**",
      " * Descripción: La descripción de por qué estamos haciendo este componente y que resuelve.",
      " *",
      " * Implementación: Descripción sobre cómo puedes implementar el componente.",
      " *",
      " * Bugs: Qué bugs se han presentado y como se solucionan.",
      " */",
      "",
      "",
      "const ${TM_FILENAME_BASE}$1 = () => {",
      "  // Estados",
      "  const [data, setData] = useState([]);",
      "",
      "  // Contextos",
      "",
      "  // Hooks",
      "",
      "  // Funciones",
      "  const getData = async () => {",
      "     try {",
      "       // const data = await",
      "       console.log(data);",
      "     } catch (error) {",
      "       console.log(error);",
      "     }",
      "  };",
      "",
      "  // UseEffects",
      "  useEffect(() => {",
      "   getData();",
      "  }, []);",
      "",
      "  return <>$2</>;",
      "};",
      "",
      "export default ${TM_FILENAME_BASE}$1;"
    ],
    "description": "Estructura de un componente react con arrow function, con la estructura para llamar a una api"
  },

  "react function component": {
    "prefix": "_rfc",
    "scope": "javascript, javascriptreact",
    "body": [
      "",
      "// Librerias",
      "import React, { useEffect, useState } from 'react';",
      "",
      "// Contextos",
      "",
      "// Hooks",
      "",
      "// Componentes",
      "",
      "// Imagenes",
      "",
      "// Estilos",
      "",
      "/**",
      " * Descripción: La descripción de por qué estamos haciendo este componente y que resuelve.",
      " *",
      " * Implementación: Descripción sobre cómo puedes implementar el componente.",
      " *",
      " * Bugs: Qué bugs se han presentado y como se solucionan.",
      " */",
      "",
      "",
      "function ${TM_FILENAME_BASE}$1() {",
      "  // Estados",
      "  const [data, setData] = useState([]);",
      "",
      "  // Contextos",
      "",
      "  // Hooks",
      "",
      "  // Funciones",
      "",
      "  // UseEffects",
      "  useEffect(() => {}, []);",
      "",
      "  return <>$2</>;",
      "};",
      "",
      "export default ${TM_FILENAME_BASE}$1;"
    ],
    "description": "Estructura de un componente react con function, con la estructura para trabajar con nuestro sistema de diseño"
  },

  "react function api component": {
    "prefix": "_rfcapi",
    "scope": "javascript, javascriptreact",
    "body": [
      "",
      "// Librerias",
      "import React, { useEffect, useState } from 'react';",
      "",
      "// Contextos",
      "",
      "// Hooks",
      "",
      "// Componentes",
      "",
      "// Imagenes",
      "",
      "// Estilos",
      "",
      "/**",
      "* Descripción: La descripción de por qué estamos haciendo este componente y que resuelve.",
      "*",
      "* Implementación: Descripción sobre cómo puedes implementar el componente.",
      "*",
      "* Bugs: Qué bugs se han presentado y como se solucionan.",
      "*/",
      "",
      "function ${TM_FILENAME_BASE}$1() {",
      "  // Estados",
      "  const [data, setData] = useState([]);",
      "",
      "  // Contextos",
      "",
      "  // Hooks",
      "",
      "  // Funciones",
      "  const getData = async () => {",
      "     try {",
      "       // const data = await",
      "       console.log(data);",
      "     } catch (error) {",
      "       console.log(error);",
      "     }",
      "  };",
      "",
      "  // UseEffects",
      "  useEffect(() => {",
      "   getData();",
      "  }, []);",
      "",
      "  return <>$2</>;",
      "};",
      "",
      "export default ${TM_FILENAME_BASE}$1;"
    ],
    "description": "Estructura de un componente react con function, con la estructura para llamar a una api"
  },

  "react hook": {
    "prefix": "_rhook",
    "scope": "javascript, javascriptreact",
    "body": [
      "",
      "// Librerias",
      "import { useState, useEffect } from 'react';",
      "",
      "// Otros",
      "",
      "/**",
      " * Descripcion del hook: La descripción de por qué estamos haciendo este hook y que resuelve.",
      " *",
      " * Implementacion: Descripción sobre cómo puedes implementar el hook.",
      " *",
      " * Bugs: Qué bugs se han presentado y como se solucionan.",
      " */",
      "",
      "const ${TM_FILENAME_BASE}$1 = () => {",
      "  const [tests, setTests] = useState([]);",
      "",
      "  useEffect(() => {}, []);",
      "",
      "  return tests;",
      "};",
      "",
      "export default ${TM_FILENAME_BASE}$1;",
      ""
    ],
    "description": "Estructura de un hook en react, con la estructura para trabajar con nuestro sistema de diseño"
  },

  "react context": {
    "prefix": "_rcontext",
    "scope": "javascript, javascriptreact",
    "body": [
      "",
      "// Librerias",
      "import { createContext, useState } from 'react';",
      "",
      "// Otros",
      "",
      "/**",
      " * Descripcion del context: La descripción de por qué estamos haciendo este context y que resuelve.",
      " *",
      " * Implementacion: Descripción sobre cómo puedes implementar el context.",
      " *",
      " * Bugs: Qué bugs se han presentado y como se solucionan.",
      " */",
      "",
      "const ${TM_FILENAME_BASE}$1 = createContext();",
      "",
      "export function Provider({ children }) {",
      "  const [state$2, setState$3] = useState();",
      "",
      "  return (",
      "    <${TM_FILENAME_BASE}$1.Provider value={{ state$2, setState$3 }}>{children}</${TM_FILENAME_BASE}$1.Provider>",
      "  );",
      "}",
      "export default ${TM_FILENAME_BASE}$1;",
      ""
    ],
    "description": "Estructura de un contexto en react, con la estructura para trabajar con nuestro sistema de diseño"
  },

  "webpack react config": {
    "prefix": "wpcr",
    "scope": "javascript, javascriptreact",
    "body": [
      "const path = require(\"path\");",
      "const HtmlWebpackPlugin = require(\"html-webpack-plugin\");",
      "",
      "module.exports = {",
      "  entry: \"./src/index.js\",",
      "  output: {",
      "    path: path.resolve(__dirname, \"dist\"),",
      "    filename: \"bundle.js\",",
      "    publicPath: '/',",
      "  },",
      "  resolve: {",
      "    extensions: [\".js\", \".jsx\"],",
      "  },",
      "  module: {",
      "    rules: [",
      "      {",
      "        test: /\\.(js|jsx)$/,",
      "        exclude: /node_modules/,",
      "        use: {",
      "          loader: \"babel-loader\",",
      "        },",
      "      },",
      "      {",
      "        test: /\\.html$/,",
      "        use: [",
      "          {",
      "            loader: \"html-loader\",",
      "          },",
      "        ],",
      "      },",
      "    ],",
      "  },",
      "  plugins: [",
      "    new HtmlWebpackPlugin({",
      "      template: \"./public/index.html\",",
      "      filename: \"./index.html\",",
      "    }),",
      "  ],",
      "  devServer: {",
      "    contentBase: path.join(__dirname, \"dist\"),",
      "    compress: true,",
      "    port: 3000,",
      "    open: true,",
      "    historyApiFallback: true",
      "  },",
      "};"
    ],
    "description": "webpack react configuration"
  },

  "webpack react css config": {
    "prefix": "wprcc",
    "scope": "javascript, javascriptreact",
    "body": [
      "const path = require(\"path\");",
      "const HtmlWebpackPlugin = require(\"html-webpack-plugin\");",
      "const MiniCssExtractPlugin = require('mini-css-extract-plugin');",
      "",
      "module.exports = {",
      "    entry: \"./src/index.js\",",
      "    output: {",
      "      path: path.resolve(__dirname, \"dist\"),",
      "      filename: \"bundle.js\",",
      "    publicPath: '/',",
      "    },",
      "    resolve: {",
      "      extensions: [\".js\", \".jsx\"],",
      "    },",
      "    module: {",
      "      rules: [",
      "        {",
      "          test: /\\.(js|jsx)$/,",
      "          exclude: /node_modules/,",
      "          use: {",
      "            loader: \"babel-loader\",",
      "          },",
      "        },",
      "        {",
      "          test: /\\.html$/,",
      "          use: [",
      "            {",
      "              loader: \"html-loader\",",
      "            },",
      "          ],",
      "        },",
      "        {",
      "            test: /\\.css$/,",
      "            use:[",
      "                {",
      "                    loader: MiniCssExtractPlugin.loader,",
      "                },",
      "                'css-loader'",
      "            ]",
      "        }",
      "      ],",
      "    },",
      "    plugins: [",
      "      new HtmlWebpackPlugin({",
      "        template: \"./public/index.html\",",
      "        filename: \"./index.html\",",
      "      }),",
      "",
      "      new MiniCssExtractPlugin({",
      "          filename: 'assets/[name].css',",
      "      })",
      "    ],",
      "    devServer: {",
      "      contentBase: path.join(__dirname, \"dist\"),",
      "      compress: true,",
      "      port: 3005,",
      "      open: true,",
      "    historyApiFallback: true",
      "    },",
      "  };"
    ],
    "description": "webpack config html and css"
  },

  "webpack react sass config": {
    "prefix": "wprsc",
    "scope": "javascript, javascriptreact",
    "body": [
      "const path = require(\"path\");",
      "const HtmlWebpackPlugin = require(\"html-webpack-plugin\");",
      "const MiniCssExtractPlugin = require('mini-css-extract-plugin');",
      "",
      "module.exports = {",
      "    entry: \"./src/index.js\",",
      "    output: {",
      "      path: path.resolve(__dirname, \"dist\"),",
      "      filename: \"bundle.js\",",
      "    publicPath: '/',",
      "    },",
      "    resolve: {",
      "      extensions: [\".js\", \".jsx\"],",
      "    },",
      "    module: {",
      "      rules: [",
      "        {",
      "          test: /\\.(js|jsx)$/,",
      "          exclude: /node_modules/,",
      "          use: {",
      "            loader: \"babel-loader\",",
      "          },",
      "        },",
      "        {",
      "          test: /\\.html$/,",
      "          use: [",
      "            {",
      "              loader: \"html-loader\",",
      "            },",
      "          ],",
      "        },",
      "        {",
      "            test: /\\.css$/,",
      "            use:[",
      "                {",
      "                    loader: MiniCssExtractPlugin.loader,",
      "                },",
      "                'css-loader'",
      "            ]",
      "        },",
      "       {",
      "            test: /\\.scss$/,",
      "            use:[",
      "                {",
      "                    loader: MiniCssExtractPlugin.loader,",
      "                },",
      "                'css-loader',",
      "                'sass-loader'",
      "            ]",
      "        }",
      "      ],",
      "    },",
      "    plugins: [",
      "      new HtmlWebpackPlugin({",
      "        template: \"./public/index.html\",",
      "        filename: \"./index.html\",",
      "      }),",
      "",
      "      new MiniCssExtractPlugin({",
      "          filename: 'assets/[name].css',",
      "      })",
      "    ],",
      "    devServer: {",
      "      contentBase: path.join(__dirname, \"dist\"),",
      "      compress: true,",
      "      port: 3005,",
      "      open: true,",
      "    historyApiFallback: true",
      "    },",
      "  };"
    ],
    "description": "webpack config html and css"
  },

  "webpack react less config": {
    "prefix": "wprlc",
    "scope": "javascript, javascriptreact",
    "body": [
      "const path = require(\"path\");",
      "const HtmlWebpackPlugin = require(\"html-webpack-plugin\");",
      "const MiniCssExtractPlugin = require('mini-css-extract-plugin');",
      "",
      "module.exports = {",
      "    entry: \"./src/index.js\",",
      "    output: {",
      "      path: path.resolve(__dirname, \"dist\"),",
      "      filename: \"bundle.js\",",
      "    publicPath: '/',",
      "    },",
      "    resolve: {",
      "      extensions: [\".js\", \".jsx\"],",
      "    },",
      "    module: {",
      "      rules: [",
      "        {",
      "          test: /\\.(js|jsx)$/,",
      "          exclude: /node_modules/,",
      "          use: {",
      "            loader: \"babel-loader\",",
      "          },",
      "        },",
      "        {",
      "          test: /\\.html$/,",
      "          use: [",
      "            {",
      "              loader: \"html-loader\",",
      "            },",
      "          ],",
      "        },",
      "        {",
      "            test: /\\.css$/,",
      "            use:[",
      "                {",
      "                    loader: MiniCssExtractPlugin.loader,",
      "                },",
      "                'css-loader'",
      "            ]",
      "        },",
      "       {",
      "            test: /\\.less$/,",
      "            use:[",
      "                {",
      "                    loader: MiniCssExtractPlugin.loader,",
      "                },",
      "                'css-loader',",
      "                'less-loader'",
      "            ]",
      "        }",
      "      ],",
      "    },",
      "    plugins: [",
      "      new HtmlWebpackPlugin({",
      "        template: \"./public/index.html\",",
      "        filename: \"./index.html\",",
      "      }),",
      "",
      "      new MiniCssExtractPlugin({",
      "          filename: 'assets/[name].css',",
      "      })",
      "    ],",
      "    devServer: {",
      "      contentBase: path.join(__dirname, \"dist\"),",
      "      compress: true,",
      "      port: 3005,",
      "      open: true,",
      "    historyApiFallback: true",
      "    },",
      "  };"
    ],
    "description": "webpack config html and css"
  },

  "webpack react stylus config": {
    "prefix": "wprsyc",
    "scope": "javascript, javascriptreact",
    "body": [
      "const path = require(\"path\");",
      "const HtmlWebpackPlugin = require(\"html-webpack-plugin\");",
      "const MiniCssExtractPlugin = require('mini-css-extract-plugin');",
      "",
      "module.exports = {",
      "    entry: \"./src/index.js\",",
      "    output: {",
      "      path: path.resolve(__dirname, \"dist\"),",
      "      filename: \"bundle.js\",",
      "    publicPath: '/',",
      "    },",
      "    resolve: {",
      "      extensions: [\".js\", \".jsx\"],",
      "    },",
      "    module: {",
      "      rules: [",
      "        {",
      "          test: /\\.(js|jsx)$/,",
      "          exclude: /node_modules/,",
      "          use: {",
      "            loader: \"babel-loader\",",
      "          },",
      "        },",
      "        {",
      "          test: /\\.html$/,",
      "          use: [",
      "            {",
      "              loader: \"html-loader\",",
      "            },",
      "          ],",
      "        },",
      "        {",
      "            test: /\\.css$/,",
      "            use:[",
      "                {",
      "                    loader: MiniCssExtractPlugin.loader,",
      "                },",
      "                'css-loader'",
      "            ]",
      "        },",
      "       {",
      "            test: /\\.styl$/,",
      "            use:[",
      "                {",
      "                    loader: MiniCssExtractPlugin.loader,",
      "                },",
      "                'css-loader',",
      "                'stylus-loader'",
      "            ]",
      "        }",
      "      ],",
      "    },",
      "    plugins: [",
      "      new HtmlWebpackPlugin({",
      "        template: \"./public/index.html\",",
      "        filename: \"./index.html\",",
      "      }),",
      "",
      "      new MiniCssExtractPlugin({",
      "          filename: 'assets/[name].css',",
      "      })",
      "    ],",
      "    devServer: {",
      "      contentBase: path.join(__dirname, \"dist\"),",
      "      compress: true,",
      "      port: 3005,",
      "      open: true,",
      "    historyApiFallback: true",
      "    },",
      "  };"
    ],
    "description": "webpack config html and css"
  },

  "sis case template": {
    "prefix": "sct",
    "scope": "javascript, javascriptreact",
    "body": [
      "  case '': {",
      "    if (SIS_CONFIG_DATA.pagesActive && SIS_CONFIG_DATA.pagesActive.indexOf('') == -1) {",
      "      SIS_router('homepage');",
      "      return;",
      "    }",
      "    var styles = SIS_createElement('link', 'stylesheet', 'text/css', SIS_SRC.CSS + '');",
      "    SIS_DOM_HEAD.appendChild(styles);",

      "    styles.onload = function () {",
      "      $('#contentPage')",
      "        .empty()",
      "        .load(SIS_FILES.EXAMPLENAME, function () {",
      "          var script = SIS_createElement('script', '', 'text/javascript, javascriptreact', SIS_SRC.DEPENDENCIES + '');",

      "          SIS_DOM_BODY.appendChild(script);",

      "          script.onload = function () { //Inicia la pagina };",

      "          SIS_translate(SIS_LANG);",
      "        });",

      "      SIS_translate(SIS_LANG);",
      "    };",

      "    break;",
      "  }"
    ],
    "description": "plantilla de estructura para agregar paginas al sis"
  }
}
